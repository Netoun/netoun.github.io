---
import "../styles/base.css"
import "@fontsource/caveat-brush"

import Header from "../components/Header.astro"
interface Props {
  title: string
}

const { title } = Astro.props
---

<!doctype html>
<html lang='en'>
  <head>
    <link
      rel='preload'
      href='/fonts/PPTelegraf-Regular.otf'
      as='font'
      type='font/otf'
      crossorigin
    />
    <link
      rel='preload'
      href='/fonts/PPTelegraf-Ultrabold.otf'
      as='font'
      type='font/otf'
      crossorigin
    />
    <link
      rel='preload'
      href='/fonts/PPTelegraf-Ultrabold.otf'
      as='font'
      type='font/otf'
      crossorigin
    />
    <meta charset='UTF-8' />
    <meta name='description' content='Astro description' />
    <meta name='viewport' content='width=device-width' />
    <link rel='icon' type='image/svg+xml' href='/favicon.svg' />
    <link
      rel='preload'
      as='image'
      href='/images/hero/bg_light_whurz1_ar_4_3,c_fill,g_auto__c_scale,w_1186.webp'
      imagesrcset='/images/hero/bg_light_whurz1_ar_9_16,c_fill,g_auto__c_scale,w_1080.webp, 
                /images/hero/bg_light_whurz1_ar_16_9,c_fill,g_auto__c_scale,w_1440.webp, 
               /images/hero/bg_light_whurz1_c_scale,w_2880.webp'
      imagesizes='(max-width: 920px) 100vw, 920px'
    />
    <meta name='generator' content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body class='text-primary dark:bg-secondary scroll-smooth overflow-x-hidden'>
    <Header />
    <main class='h-full'>
      <slot />
    </main>
  </body>
</html>

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme")
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light"
  }
  const isDark = getThemePreference() === "dark"
  document.documentElement.classList[isDark ? "add" : "remove"]("dark")

  if (typeof localStorage !== "undefined") {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("dark")
      localStorage.setItem("theme", isDark ? "dark" : "light")
    })
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"]
    })
  }
</script>
