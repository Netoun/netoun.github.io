---
import {
  getLangFromUrl,
  useTranslatedPath,
  useTranslatedText
} from "@i18n/utils"
import Layout from "@layouts/layout.astro"
import { getCollection, type CollectionEntry } from "astro:content"
import { PrinterIcon } from "lucide-react"

import Button from "@components/ui/button.astro"
import Tag from "@components/ui/tag.astro"

const lang = getLangFromUrl(Astro.url)
const t = useTranslatedText(lang)

const allExperiences = await getCollection("experience", ({ id }) => {
  return id.startsWith(`${lang}/`)
})
const allSchools = await getCollection("school", ({ id }) => {
  return id.startsWith(`${lang}/`)
})

const myAge = new Date().getFullYear() - 1995

const jobDatetime = new Intl.DateTimeFormat(lang, {
  day: "numeric",
  month: "numeric",
  year: "numeric"
})
const jobDate = new Intl.DateTimeFormat(lang, {
  month: "short",
  year: "numeric"
})

type Experience = CollectionEntry<"experience">
type School = CollectionEntry<"school">
---

<Layout title={t("resume.title")} description={t("resume.description")}>
  <section
    id='resume'
    class='max-w space-y-10 pb-16 pt-8 [min-height:calc(100dvh-var(--height-footer)-var(--height-header))] print:m-0 print:p-0 print:py-8'
  >
    <Button onclick='window.print()' class='print:hidden'>
      {t("resume.print")}
      <PrinterIcon size='20' className='ml-2' />
    </Button>
    <div class='flex flex-col justify-between gap-8 md:flex-row print:gap-12'>
      <div class='space-y-8 print:space-y-6 print:text-[0.95rem]'>
        <div
          class='space-y-6 print:flex print:justify-between print:space-y-0 print:pb-4'
        >
          <div
            class='flex max-w-4xl flex-wrap items-center justify-between gap-6'
          >
            <div class='flex flex-1 flex-col'>
              <h2 class='font-title text-6xl font-medium print:text-5xl'>
                Nicolas Coulonnier
              </h2>
              <h3 class='text-3xl print:text-2xl'>
                <span class='font-medium text-secondary print:text-[#4a4a4a]'>
                  Frontend Developer
                </span>
              </h3>
            </div>
          </div>
          <div>
            <ul class='print:text-end print:text-[0.9rem]'>
              <li>
                <strong class='uppercase print:font-sans'
                  >{t("resume.contact.email")}</strong
                > : <a href='mailto:coulonnier.nicolas.44@gmail.com'>
                  coulonnier.nicolas.44@gmail.com
                </a>
              </li>
              <li>
                <strong class='uppercase print:font-sans'>Age</strong> : {myAge}
                {t("resume.contact.age")}
              </li>
              <li>
                <strong class='uppercase print:font-sans'
                  >{t("resume.contact.location")}</strong
                > : Nantes, France
              </li>
            </ul>
          </div>
        </div>
        <div
          class='space-y-2 pt-4 text-lg text-primary md:max-w-4xl print:space-y-3 print:pt-0 print:text-[0.95rem] print:leading-normal'
        >
          <p>
            {t("resume.bio")}
          </p>
          <p class='print:hidden'>
            {t("resume.bio.opensource")}
          </p>
          <p class='print:hidden'>
            {t("resume.bio.tech")}
          </p>
        </div>
        <div
          class='flex flex-col justify-between gap-16 md:flex-row md:gap-8 print:flex-row'
        >
          <div class='space-y-6 md:max-w-4xl print:max-w-[65%] print:space-y-8'>
            <div>
              <h2
                class='font-title text-4xl font-medium [text-shadow:hsla(var(--foreground)/0.5)_0px_0px_1rem] print:text-3xl print:[text-shadow:none]'
              >
                {t("resume.experience")}
              </h2>
              <div class='print:text-md text-lg print:space-y-0'>
                {
                  allExperiences
                    .sort(
                      (a: Experience, b: Experience) =>
                        Number(new Date(b.data.startDate)) -
                        Number(new Date(a.data.startDate))
                    )
                    .map((resume: Experience) => (
                      <article class='mb-8 last:mb-0'>
                        <div id='resume-header' class='space-y-2 py-2'>
                          <span class='font-medium text-muted-foreground'>
                            <time
                              datetime={jobDatetime.format(
                                new Date(resume.data.startDate)
                              )}
                            >
                              {jobDate.format(new Date(resume.data.startDate))}
                            </time>{" "}
                            -
                            {resume.data.endDate ? (
                              <time
                                datetime={jobDatetime.format(
                                  new Date(resume.data.endDate)
                                )}
                              >
                                {jobDate.format(new Date(resume.data.endDate))}
                              </time>
                            ) : (
                              "..."
                            )}
                          </span>
                          <h4 class='text-2xl'>
                            <span class='font-semibold text-secondary [text-shadow:hsla(var(--secondary)/0.75)_0px_0px_1rem] print:[text-shadow:none]'>
                              {resume.data.company}
                            </span>{" "}
                            - <span>{resume.data.job}</span>
                          </h4>
                        </div>
                        <div class='space-y-4 pb-4 text-primary print:space-y-1 print:pb-2 print:leading-7 [&_ul]:list-inside [&_ul]:list-disc [&_ul]:py-2 print:[&_ul]:py-0'>
                          {async () => {
                            const { Content } = await resume.render()

                            return (
                              <>
                                <Content />
                              </>
                            )
                          }}
                        </div>
                        <div class='flex max-w-xs flex-wrap gap-2'>
                          {resume.data.tags &&
                            resume.data.tags.map((tag: string) => (
                              <Tag tag={tag} />
                            ))}
                        </div>
                      </article>
                    ))
                }
              </div>
            </div>
            <div>
              <h2
                class='text-balance font-title text-4xl font-medium [text-shadow:hsla(var(--foreground)/0.5)_0px_0px_1rem] print:text-3xl print:[text-shadow:none]'
              >
                {t("resume.schools")}
              </h2>
              <div class='print:text-md text-lg print:space-y-0'>
                {
                  allSchools
                    .sort(
                      (a: School, b: School) =>
                        Number(new Date(b.data.startDate)) -
                        Number(new Date(a.data.startDate))
                    )
                    .map((resume: School) => (
                      <article class='mb-8 last:mb-0'>
                        <div id='resume-header' class='space-y-2 py-2'>
                          <span class='font-medium text-muted-foreground'>
                            <time
                              datetime={jobDatetime.format(
                                new Date(resume.data.startDate)
                              )}
                            >
                              {jobDate.format(new Date(resume.data.startDate))}
                            </time>{" "}
                            -
                            {resume.data.endDate ? (
                              <time
                                datetime={jobDatetime.format(
                                  new Date(resume.data.endDate)
                                )}
                              >
                                {jobDate.format(new Date(resume.data.endDate))}
                              </time>
                            ) : (
                              "..."
                            )}
                          </span>
                          <h4 class='text-2xl'>
                            <span class='font-semibold text-secondary [text-shadow:hsla(var(--secondary)/0.75)_0px_0px_1rem] print:[text-shadow:none]'>
                              {resume.data.diploma}
                            </span>{" "}
                            - <span>{resume.data.school}</span>
                          </h4>
                        </div>
                        <div class='space-y-4 pb-4 text-primary print:space-y-1 print:pb-2 [&_ul]:list-inside [&_ul]:list-disc [&_ul]:py-2 print:[&_ul]:py-0'>
                          {async () => {
                            const { Content } = await resume.render()
                            return <Content />
                          }}
                        </div>
                        <div class='flex max-w-xs flex-wrap gap-2'>
                          {resume.data.tags &&
                            resume.data.tags.map((tag: string) => (
                              <Tag tag={tag} />
                            ))}
                        </div>
                      </article>
                    ))
                }
              </div>
            </div>
          </div>
          <div class='space-y-8 print:max-w-[30%]'>
            <div
              id='skills'
              class='card relative overflow-hidden rounded-xl border bg-foreground/5 p-6 shadow-xl print:shadow-none'
            >
              <div class='card-gradient absolute inset-0 opacity-0'></div>
              <div class='relative z-10'>
                <h3
                  class='font-title text-3xl font-medium [text-shadow:hsla(var(--foreground)/0.5)_0px_0px_1rem]'
                >
                  {t("resume.skills")}
                </h3>
                <div class='mt-2 space-y-4'>
                  <div>
                    <strong>{t("resume.skills.frontend")}</strong>
                    <div class='mt-1 flex flex-wrap gap-2'>
                      <Tag tag='react' />
                      <Tag tag='remix' />
                      <Tag tag='vue' />
                      <Tag tag='typescript' />
                    </div>
                  </div>
                  <div>
                    <strong>{t("resume.skills.backend")}</strong>
                    <div class='mt-1 flex flex-wrap gap-2'>
                      <Tag tag='node' />
                      <Tag tag='nest' />
                      <Tag tag='python' />
                      <Tag tag='rust' />
                    </div>
                  </div>
                  <div>
                    <strong>{t("resume.skills.database")}</strong>
                    <div class='mt-1 flex flex-wrap gap-2'>
                      <Tag tag='postgresql' />
                      <Tag tag='database' />
                      <Tag tag='prisma' />
                      <Tag tag='mikro-orm' />
                    </div>
                  </div>
                  <div>
                    <strong>{t("resume.skills.system")}</strong>
                    <div class='mt-1 flex flex-wrap gap-2'>
                      <Tag tag='system' />
                      <Tag tag='network' />
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              id='miscellaneous'
              class='card relative overflow-hidden rounded-xl border bg-foreground/5 p-6 shadow-xl print:shadow-none'
            >
              <div class='card-gradient absolute inset-0 opacity-0'></div>
              <div class='relative z-10'>
                <h3
                  class='font-title text-3xl font-medium [text-shadow:hsla(var(--foreground)/0.5)_0px_0px_1rem]'
                >
                  {t("resume.misc")}
                </h3>
                <div class='mt-2 space-y-4'>
                  <div>
                    <strong>{t("resume.misc.hobbies")}</strong>
                    <div class='mt-1 flex flex-wrap gap-2'>
                      <Tag tag='music' />
                      <Tag tag='gaming' />
                      <Tag tag='drawing' />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
</Layout>

<div
  class='text-md hidden items-center justify-center text-primary print:fixed print:bottom-4 print:left-0 print:flex print:h-8 print:w-full print:text-[0.8rem] print:text-gray-500'
>
  <span>
    {t("resume.footer")}{" "}
    <a href='https://netoun.com' class='text-gray-700'>netoun.com</a>
  </span>
</div>

<style is:global>
  @page {
    size: A4;
    margin: 1.5cm 2cm;
  }

  @media print {
    html {
      font-size: 12pt;
    }

    body {
      -webkit-print-color-adjust: exact !important;
      print-color-adjust: exact !important;
    }

    /* Suppression des ombres et effets pour l'impression */
    * {
      text-shadow: none !important;
      box-shadow: none !important;
    }

    /* Assurer que les sauts de page sont gérés correctement */
    article {
      break-inside: avoid;
      page-break-inside: avoid;
    }

    h2,
    h3,
    h4 {
      break-after: avoid;
      page-break-after: avoid;
    }

    /* Ajustements pour les liens */
    a {
      text-decoration: none !important;
    }

    /* Optimisations pour Firefox */
    @-moz-document url-prefix() {
      body {
        size: A4;
        margin: 0;
      }
    }
  }

  .card {
    transition: transform 0.3s ease;
  }

  .card-gradient {
    background: linear-gradient(
      45deg,
      hsla(var(--secondary) / 0.1),
      hsla(var(--primary) / 0.1),
      hsla(var(--secondary) / 0.1)
    );
    background-size: 200% 200%;
    filter: blur(24px);
    opacity: 0.5;
  }

  @media print {
    .card-gradient {
      display: none;
    }
  }
</style>

<script>
  import { gsap } from "gsap"

  const cards = document.querySelectorAll(".card")

  cards.forEach((card) => {
    const gradient = card.querySelector(".card-gradient")

    // Animation continue du gradient
    gsap.to(gradient, {
      backgroundPosition: "200% 200%",
      duration: 8,
      ease: "none",
      repeat: -1
    })

    // Animation subtile au hover de la carte
    card.addEventListener("mouseenter", () => {
      gsap.to(card, {
        y: -4,
        scale: 1.02,
        duration: 0.4,
        ease: "power2.out"
      })

      // Intensifier légèrement le gradient au hover
      gsap.to(gradient, {
        opacity: 0.7,
        duration: 0.4
      })
    })

    card.addEventListener("mouseleave", () => {
      gsap.to(card, {
        y: 0,
        scale: 1,
        duration: 0.4,
        ease: "power2.in"
      })

      // Retour à l'opacité normale
      gsap.to(gradient, {
        opacity: 0.5,
        duration: 0.4
      })
    })
  })
</script>
