---
import { getLangFromUrl, useTranslatedText } from "@i18n/utils"

const tagColors = {
  react: {
    trad: "React",
    style:
      "bg-[hsl(var(--tag-react)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-react)/var(--tag-opacity-dark))]"
  },
  remix: {
    trad: "Remix",
    style:
      "bg-[hsl(var(--tag-remix)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-remix)/var(--tag-opacity-dark))]"
  },
  "chakra-ui": {
    trad: "Chakra UI",
    style:
      "bg-[hsl(var(--tag-chakra)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-chakra)/var(--tag-opacity-dark))]"
  },
  prisma: {
    trad: "Prisma",
    style:
      "bg-[hsl(var(--tag-prisma)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-prisma)/var(--tag-opacity-dark))]"
  },
  fly: {
    trad: "Fly",
    style:
      "bg-[hsl(var(--tag-fly)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-fly)/var(--tag-opacity-dark))]"
  },
  workers: {
    trad: "Workers",
    style:
      "bg-[hsl(var(--tag-workers)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-workers)/var(--tag-opacity-dark))]"
  },
  canvas: {
    trad: "Canvas",
    style:
      "bg-[hsl(var(--tag-canvas)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-canvas)/var(--tag-opacity-dark))]"
  },
  threejs: {
    trad: "Three.js",
    style:
      "bg-[hsl(var(--tag-threejs)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-threejs)/var(--tag-opacity-dark))]"
  },
  typescript: {
    trad: "Typescript",
    style:
      "bg-[hsl(var(--tag-typescript)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-typescript)/var(--tag-opacity-dark))]"
  },
  postgresql: {
    trad: "PostgreSQL",
    style:
      "bg-[hsl(var(--tag-postgresql)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-postgresql)/var(--tag-opacity-dark))]"
  },
  graphql: {
    trad: "GraphQL",
    style:
      "bg-[hsl(var(--tag-graphql)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-graphql)/var(--tag-opacity-dark))]"
  },
  node: {
    trad: "Node",
    style:
      "bg-[hsl(var(--tag-node)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-node)/var(--tag-opacity-dark))]"
  },
  vue: {
    trad: "Vue",
    style:
      "bg-[hsl(var(--tag-vue)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-vue)/var(--tag-opacity-dark))]"
  },
  python: {
    trad: "Python",
    style:
      "bg-[hsl(var(--tag-python)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-python)/var(--tag-opacity-dark))]"
  },
  rust: {
    trad: "Rust",
    style:
      "bg-[hsl(var(--tag-rust)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-rust)/var(--tag-opacity-dark))]"
  },
  cpp: {
    trad: "C++",
    style:
      "bg-[hsl(var(--tag-cpp)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-cpp)/var(--tag-opacity-dark))]"
  },
  web: {
    trad: "Web",
    style:
      "bg-[hsl(var(--tag-web)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-web)/var(--tag-opacity-dark))]"
  },
  database: {
    trad: "Database",
    style:
      "bg-[hsl(var(--tag-database)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-database)/var(--tag-opacity-dark))]"
  },
  network: {
    trad: "Network",
    style:
      "bg-[hsl(var(--tag-network)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-network)/var(--tag-opacity-dark))]"
  },
  system: {
    trad: "System",
    style:
      "bg-[hsl(var(--tag-system)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-system)/var(--tag-opacity-dark))]"
  },
  dialogflow: {
    trad: "DialogFlow",
    style:
      "bg-[hsl(var(--tag-dialogflow)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-dialogflow)/var(--tag-opacity-dark))]"
  },
  tensorflow: {
    trad: "TensorFlow",
    style:
      "bg-[hsl(var(--tag-tensorflow)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-tensorflow)/var(--tag-opacity-dark))]"
  },
  drone: {
    trad: "Drone",
    style:
      "bg-[hsl(var(--tag-drone)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-drone)/var(--tag-opacity-dark))]"
  },
  apollo: {
    trad: "Apollo",
    style:
      "bg-[hsl(var(--tag-apollo)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-apollo)/var(--tag-opacity-dark))]"
  },
  nest: {
    trad: "Nest",
    style:
      "bg-[hsl(var(--tag-nest)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-nest)/var(--tag-opacity-dark))]"
  },
  "shadcn-ui": {
    trad: "Shadcn UI",
    style:
      "bg-[hsl(var(--tag-shadcn)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-shadcn)/var(--tag-opacity-dark))]"
  },
  turborepo: {
    trad: "Turborepo",
    style:
      "bg-[hsl(var(--tag-turborepo)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-turborepo)/var(--tag-opacity-dark))]"
  },
  "mikro-orm": {
    trad: "MikroOrm",
    style:
      "bg-[hsl(var(--tag-mikro-orm)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-mikro-orm)/var(--tag-opacity-dark))]"
  },
  "computer-science": {
    trad: "Computer Science",
    style:
      "bg-[hsl(var(--tag-cs)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-cs)/var(--tag-opacity-dark))]"
  },
  "information-systems": {
    trad: "Information Systems",
    style:
      "bg-[hsl(var(--tag-is)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-is)/var(--tag-opacity-dark))]"
  },
  music: {
    trad: "Music",
    style:
      "bg-[hsl(var(--tag-music)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-music)/var(--tag-opacity-dark))]"
  },
  drawing: {
    trad: "Drawing",
    style:
      "bg-[hsl(var(--tag-drawing)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-drawing)/var(--tag-opacity-dark))]"
  },
  gaming: {
    trad: "Gaming",
    style:
      "bg-[hsl(var(--tag-gaming)/var(--tag-opacity-light))] dark:bg-[hsl(var(--tag-gaming)/var(--tag-opacity-dark))]"
  }
} as const

interface Props {
  tag: keyof typeof tagColors | string
  className?: string
}

const { tag, className = "" } = Astro.props

const lang = getLangFromUrl(Astro.url)
const t = useTranslatedText(lang)

const tagObj = tagColors[tag as keyof typeof tagColors] || {
  trad: "not-defined",
  style: "bg-zinc-100 dark:bg-zinc-800 text-zinc-900 dark:text-zinc-100"
}
---

<!-- Couleurs possibles pour les tags avec variables CSS -->
<span
  class={`tag relative rounded-full px-2 py-1 text-xs cursor-pointer select-none ${
    tagObj.style
  } ${className} print:bg-transparent print:text-[#4a4a4a]`}
>
  {t(`tag.${tagObj.trad}`, { tag })}
  <div
    class='glass absolute inset-0 rounded-full opacity-0 backdrop-blur-[1px] backdrop-brightness-150'
  >
  </div>
</span>

<script>
  import { gsap } from "gsap"
  import { Elastic } from "gsap/all"

  gsap.registerPlugin(Elastic)

  const tags = document.querySelectorAll(".tag")

  tags.forEach((tag) => {
    const glass = tag.querySelector(".glass")
    let isPressed = false
    let animation: GSAPAnimation | null = null

    // Animation d'étirement élastique au hover
    tag.addEventListener("mouseenter", () => {
      if (!isPressed) {
        animation = gsap.to(tag, {
          scaleX: 1.2,
          scaleY: 0.8,
          duration: 0.4,
          ease: "elastic.out(1, 0.3)"
        })
      }
    })

    tag.addEventListener("mouseleave", () => {
      if (!isPressed) {
        animation?.kill()
        gsap.to(tag, {
          scale: 1,
          scaleX: 1,
          scaleY: 1,
          duration: 0.4,
          ease: "elastic.out(1, 0.3)"
        })
        // Reset glass effect
        gsap.to(glass, {
          opacity: 0,
          duration: 0.2
        })
      }
    })

    // Animation au click
    tag.addEventListener("mousedown", () => {
      isPressed = true
      animation?.kill()

      // Squish effect
      gsap.to(tag, {
        scaleX: 0.9,
        scaleY: 1.2,
        duration: 0.1,
        ease: "power2.out"
      })

      // Glass effect
      gsap.to(glass, {
        opacity: 0.3,
        duration: 0.1
      })
    })

    tag.addEventListener("mouseup", () => {
      isPressed = false

      // Bounce back
      gsap.to(tag, {
        scale: 1,
        scaleX: 1,
        scaleY: 1,
        duration: 0.8,
        ease: "elastic.out(1, 0.3)"
      })

      // Fade out glass effect
      gsap.to(glass, {
        opacity: 0,
        duration: 0.3
      })
    })

    // Handle mouse leaving while pressed
    tag.addEventListener("mouseleave", () => {
      if (isPressed) {
        isPressed = false
        gsap.to(tag, {
          scale: 1,
          scaleX: 1,
          scaleY: 1,
          duration: 0.4,
          ease: "elastic.out(1, 0.3)"
        })
        gsap.to(glass, {
          opacity: 0,
          duration: 0.2
        })
      }
    })
  })
</script>

<style>
  .tag {
    transform-origin: center;
    will-change: transform;
  }

  .glass {
    pointer-events: none;
    mix-blend-mode: overlay;
  }
</style>
